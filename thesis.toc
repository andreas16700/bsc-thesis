\babel@toc {english}{}\relax 
\contentsline {chapter}{Acknowledgements}{i}{}%
\contentsline {chapter}{Abstract}{iii}{}%
\contentsline {chapter}{\numberline {1}Introduction}{3}{}%
\contentsline {section}{\numberline {1.1}Background}{3}{}%
\contentsline {section}{\numberline {1.2}Research Questions}{3}{}%
\contentsline {subsection}{\numberline {1.2.1}Performance Comparison}{3}{}%
\contentsline {subsection}{\numberline {1.2.2}Cold Start Analysis}{3}{}%
\contentsline {subsection}{\numberline {1.2.3}Ease of Development}{3}{}%
\contentsline {subsection}{\numberline {1.2.4}Resource Utilization}{3}{}%
\contentsline {subsection}{\numberline {1.2.5}Cost Analysis}{3}{}%
\contentsline {chapter}{\numberline {2}Performance Comparison}{5}{}%
\contentsline {section}{\numberline {2.1}Value Types vs Reference Types and Copy-On-Write}{5}{}%
\contentsline {subsection}{\numberline {2.1.1}Value Types}{5}{}%
\contentsline {subsection}{\numberline {2.1.2}Reference Types}{5}{}%
\contentsline {subsection}{\numberline {2.1.3}Copy-On-Write (CoW)}{5}{}%
\contentsline {subsection}{\numberline {2.1.4}Performance Benefits}{6}{}%
\contentsline {section}{\numberline {2.2}Qualitive Comparison with Go, Java, Javascript, and Python}{6}{}%
\contentsline {subsection}{\numberline {2.2.1}Go}{7}{}%
\contentsline {paragraph}{Value types in Go:}{7}{}%
\contentsline {paragraph}{Reference types in Go:}{7}{}%
\contentsline {subsection}{\numberline {2.2.2}Python}{8}{}%
\contentsline {paragraph}{Immutable objects:}{8}{}%
\contentsline {paragraph}{Mutable objects:}{8}{}%
\contentsline {subsection}{\numberline {2.2.3}Node.js (JavaScript)}{9}{}%
\contentsline {paragraph}{Reference types in JavaScript:}{9}{}%
\contentsline {paragraph}{Simulating value types in JavaScript:}{9}{}%
\contentsline {subsection}{\numberline {2.2.4}Java}{10}{}%
\contentsline {paragraph}{Value types in Java:}{10}{}%
\contentsline {paragraph}{Reference types in Java:}{10}{}%
\contentsline {section}{\numberline {2.3}Summary}{11}{}%
\contentsline {chapter}{\numberline {3}Cold Start Analysis of Serverless Languages on OpenWhisk}{13}{}%
\contentsline {section}{\numberline {3.1}Introduction}{13}{}%
\contentsline {section}{\numberline {3.2}Background and Related Work}{13}{}%
\contentsline {section}{\numberline {3.3}Benchmark Functions Selection}{13}{}%
\contentsline {section}{\numberline {3.4}OpenWhisk Setup and Configuration}{13}{}%
\contentsline {section}{\numberline {3.5}Methodology}{13}{}%
\contentsline {subsection}{\numberline {3.5.1}Deployment and Timing Approach}{13}{}%
\contentsline {subsection}{\numberline {3.5.2}Fairness and Consistency}{13}{}%
\contentsline {section}{\numberline {3.6}Results and Analysis}{13}{}%
\contentsline {subsection}{\numberline {3.6.1}Quantitative Results}{13}{}%
\contentsline {subsection}{\numberline {3.6.2}Comparative Analysis}{13}{}%
\contentsline {section}{\numberline {3.7}Factors Affecting Cold Start Times}{13}{}%
\contentsline {section}{\numberline {3.8}Discussion and Interpretation}{13}{}%
\contentsline {section}{\numberline {3.9}Conclusion}{13}{}%
\contentsline {chapter}{\numberline {4}Ease of Development}{15}{}%
\contentsline {section}{\numberline {4.1}Language Simplicity and Syntax}{15}{}%
\contentsline {subsubsection}{Simplicity in Swift}{15}{}%
\contentsline {subsubsection}{Safety Features}{16}{}%
\contentsline {subsubsection}{Readability}{16}{}%
\contentsline {subsubsection}{Copy-on-Write (CoW)}{17}{}%
\contentsline {subsubsection}{Extensions}{18}{}%
\contentsline {subsubsection}{Custom Operators}{18}{}%
\contentsline {subsubsection}{Property Wrappers}{19}{}%
\contentsline {section}{\numberline {4.2}Available Libraries and Frameworks}{22}{}%
\contentsline {subsection}{\numberline {4.2.1}Web Development}{22}{}%
\contentsline {subsubsection}{Popular Frameworks for Python, Node.js, and Java}{23}{}%
\contentsline {paragraph}{Python}{23}{}%
\contentsline {paragraph}{Node.js}{23}{}%
\contentsline {paragraph}{Java}{23}{}%
\contentsline {subsubsection}{Example Use Cases}{24}{}%
\contentsline {subsubsection}{Vapor and Swift Package Manager}{24}{}%
\contentsline {subsubsection}{Documentation and Community Support}{25}{}%
\contentsline {subsubsection}{Example: Swift Package Manager Bug}{25}{}%
\contentsline {subsection}{\numberline {4.2.2}Developer community and support}{26}{}%
\contentsline {subsection}{\numberline {4.2.3}Tooling and IDE support}{26}{}%
\contentsline {subsection}{\numberline {4.2.4}Integration with serverless platforms}{26}{}%
\contentsline {subsection}{\numberline {4.2.5}Learning curve}{26}{}%
\contentsline {subsection}{\numberline {4.2.6}Linux Support}{26}{}%
\contentsline {subsubsection}{An Example}{27}{}%
\contentsline {chapter}{\numberline {5}Synchronization System Case Study}{29}{}%
\contentsline {section}{\numberline {5.1}System Overview}{29}{}%
\contentsline {section}{\numberline {5.2}Experimental Setup}{29}{}%
\contentsline {section}{\numberline {5.3}Benchmarking Process}{29}{}%
\contentsline {subsection}{\numberline {5.3.1}Main Components}{30}{}%
\contentsline {subsubsection}{PS Server}{30}{}%
\contentsline {subsubsection}{SH Server}{30}{}%
\contentsline {subsubsection}{ModelSyncer}{31}{}%
\contentsline {subsection}{\numberline {5.3.2}Workload}{31}{}%
\contentsline {subsection}{\numberline {5.3.3}Benchmarker}{31}{}%
\contentsline {subsubsection}{Setting up the servers}{31}{}%
\contentsline {paragraph}{Generating models on PS Server}{32}{}%
\contentsline {paragraph}{Generating equivalent resource on SH Server}{32}{}%
\contentsline {subsubsection}{Running a workload}{32}{}%
\contentsline {section}{\numberline {5.4}Results and Discussion}{34}{}%
\contentsline {section}{\numberline {5.5}Improvements and Future Work}{35}{}%
\contentsline {section}{\numberline {5.6}Conclusion}{35}{}%
